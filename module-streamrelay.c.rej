--- module-streamrelay.c
+++ module-streamrelay.c
@@ -34,18 +40,32 @@ typedef struct
 	int32_t connid;
 } stream_client_conn_data;
 
-char stream_source_host[256];
-char *stream_source_auth = NULL;
-uint32_t cluster_size = 50;
+static char stream_source_host[256];
+static char *stream_source_auth = NULL;
+static uint32_t cluster_size = 50;
 bool has_dvbcsa_ecm = 0, is_dvbcsa_static = 1;
 
 static uint8_t stream_server_mutex_init = 0;
 static pthread_mutex_t stream_server_mutex;
 static int32_t glistenfd, gconncount = 0, gconnfd[STREAM_SERVER_MAX_CONNECTIONS];
-
-static pthread_mutex_t fixed_key_srvid_mutex;
-static uint16_t stream_cur_srvid[STREAM_SERVER_MAX_CONNECTIONS];
-static stream_client_key_data key_data[STREAM_SERVER_MAX_CONNECTIONS];
+#ifdef WITH_EMU
+#define STATIC /* none */
+#else
+#define STATIC static
+#endif
+STATIC pthread_mutex_t fixed_key_srvid_mutex;
+STATIC uint16_t stream_cur_srvid[STREAM_SERVER_MAX_CONNECTIONS];
+STATIC stream_client_key_data key_data[STREAM_SERVER_MAX_CONNECTIONS];
+
+#ifdef WITH_EMU
+int8_t stream_server_thread_init = 0;
+int8_t emu_stream_emm_enabled = 0;
+uint8_t emu_stream_server_mutex_init = 0;
+int8_t stream_server_has_ecm[EMU_STREAM_SERVER_MAX_CONNECTIONS];
+pthread_mutex_t emu_fixed_key_data_mutex[EMU_STREAM_SERVER_MAX_CONNECTIONS];
+emu_stream_client_key_data emu_fixed_key_data[EMU_STREAM_SERVER_MAX_CONNECTIONS];
+LLIST *ll_emu_stream_delayed_keys[EMU_STREAM_SERVER_MAX_CONNECTIONS];
+#endif
 
 #ifdef MODULE_RADEGAST
 static int32_t gRadegastFd = 0;
@@ -151,9 +174,35 @@ void ParseEcmData(stream_client_data *cdata)
 		return;
 	}
 
-	radegast_client_ecm(cdata);
+	if (caid_is_powervu(cdata->caid))
+	{
+		if (data[11] > cdata->ecm_nb || (cdata->ecm_nb == 255 && data[11] == 0) || ((cdata->ecm_nb - data[11]) > 5))
+		{
+			cdata->ecm_nb = data[11];
+			cdata->key.connid = cdata->connid;
+			powervu_ecm(data, dcw, NULL, cdata->srvid, cdata->caid, cdata->tsid, cdata->onid, cdata->ens, &cdata->key);
+		}
+	}
+#ifdef MODULE_RADEGAST
+	else
+	{
+		radegast_client_ecm(cdata);
+	}
+#endif
 }
-#endif // MODULE_RADEGAST
+#else
+#define ParseEcmData radegast_client_ecm
+#endif
+
+#if DVBCSA_KEY_ECM
+#define DVBCSA_HEADER_ECM 1
+#define dvbcsa_bs_key_set(a,b) dvbcsa_bs_key_set_ecm(ecm,a,b)
+#else
+#define DVBCSA_HEADER_ECM 0
+#endif
+#ifndef STATIC_LIBDVBCSA
+#define STATIC_LIBDVBCSA 0
+#endif
 
 static void write_cw(ECM_REQUEST *er, int32_t connid)
 {
@@ -176,31 +229,36 @@ static void write_cw(ECM_REQUEST *er, int32_t connid)
 	{
 		if (has_dvbcsa_ecm)
 		{
+#ifdef WITH_EMU
+			dvbcsa_bs_key_set(er->cw + 8, key_data[connid].key[0][ODD]);
+#else
 			dvbcsa_bs_key_set(er->cw + 8, key_data[connid].key[ODD]);
+#endif
 		}
 	}
+#ifdef WITH_EMU
+	SAFE_MUTEX_LOCK(&emu_fixed_key_data_mutex[connid]);
+	emu_fixed_key_data[connid].csa_used = 1;
+	SAFE_MUTEX_UNLOCK(&emu_fixed_key_data_mutex[connid]);
+#endif
 }
 
 bool stream_write_cw(ECM_REQUEST *er)
 {
 	int32_t i;
-	if (er->rc == E_FOUND)
+	bool cw_written = false;
+	//SAFE_MUTEX_LOCK(&fixed_key_srvid_mutex);
+	for (i = 0; i < STREAM_SERVER_MAX_CONNECTIONS; i++)
 	{
-		bool cw_written = false;
-		//SAFE_MUTEX_LOCK(&fixed_key_srvid_mutex);
-		for (i = 0; i < STREAM_SERVER_MAX_CONNECTIONS; i++)
+		if (stream_cur_srvid[i] == er->srvid)
 		{
-			if (stream_cur_srvid[i] == er->srvid)
-			{
-				write_cw(er, i);
-				cw_written = true;
-				// don't return as there might be more connections for the same channel (e.g. recordings)
-			}
+			write_cw(er, i);
+			cw_written = true;
+			// don't return as there might be more connections for the same channel (e.g. recordings)
 		}
-		//SAFE_MUTEX_UNLOCK(&fixed_key_srvid_mutex);
-		return cw_written;
 	}
-	return true;
+	//SAFE_MUTEX_UNLOCK(&fixed_key_srvid_mutex);
+	return cw_written;
 }
 
 static void SearchTsPackets(const uint8_t *buf, const uint32_t bufLength, uint16_t *packetSize, uint16_t *startOffset)
@@ -1451,10 +2160,12 @@ static void *stream_client_handler(void *arg)
 	uint16_t packetCount = 0, packetSize = 0, startOffset = 0;
 	uint32_t remainingDataPos, remainingDataLength, tmp_pids[4];
 	uint8_t descrambling = 0;
-
+#ifdef WITH_EMU
+	int32_t cur_dvb_buffer_size, cur_dvb_buffer_wait;
+#else
 	const int32_t cur_dvb_buffer_size = DVB_BUFFER_SIZE_CSA;
 	const int32_t cur_dvb_buffer_wait = DVB_BUFFER_WAIT_CSA;
-
+#endif
 	struct dvbcsa_bs_batch_s *tsbbatch;
 
 	cs_log("Stream client %i connected", conndata->connid);
@@ -1600,6 +2325,18 @@ static void *stream_client_handler(void *arg)
 				&& (streamConnectErrorCount < 3 || streamDataErrorCount < 15))
 #endif
 		{
+#ifdef WITH_EMU
+			if (data->key.csa_used)
+			{
+				cur_dvb_buffer_size = EMU_DVB_BUFFER_SIZE_CSA;
+				cur_dvb_buffer_wait = EMU_DVB_BUFFER_WAIT_CSA;
+			}
+			else
+			{
+				cur_dvb_buffer_size = EMU_DVB_BUFFER_SIZE_DES;
+				cur_dvb_buffer_wait = EMU_DVB_BUFFER_WAIT_DES;
+			}
+#endif
 			streamStatus = recv(streamfd, stream_buf + bytesRead, cur_dvb_buffer_size - bytesRead, MSG_WAITALL);
 			if (streamStatus == 0) // socket closed
 			{
@@ -1950,11 +2714,85 @@ void init_stream_server(void)
 			b64encode(authtmp, cs_strlen(authtmp), &stream_source_auth);
 		}
 
+#ifdef WITH_EMU
+		emu_stream_emm_enabled = cfg.emu_stream_emm_enabled;
+#endif
 		start_thread("stream_server", stream_server, NULL, NULL, 1, 1);
 		cs_log("Stream Relay server initialized");
 	}
 }
 
+#if WITH_EMU
+void *stream_key_delayer(void *UNUSED(arg))
+{
+	int32_t i, j;
+	const uint8_t ecm = 0;
+	emu_stream_client_key_data *cdata;
+	LL_ITER it;
+	emu_stream_cw_item *item;
+	struct timeb t_now;
+
+	while (!exit_oscam)
+	{
+		cs_ftime(&t_now);
+
+		for (i = 0; i < STREAM_SERVER_MAX_CONNECTIONS; i++)
+		{
+			it = ll_iter_create(ll_emu_stream_delayed_keys[i]);
+
+			while ((item = ll_iter_next(&it)))
+			{
+				if (comp_timeb(&t_now, &item->write_time) < 0)
+				{
+					break;
+				}
+
+				SAFE_MUTEX_LOCK(&emu_fixed_key_data_mutex[i]);
+
+				cdata = &emu_fixed_key_data[i];
+
+				for (j = 0; j < EMU_STREAM_MAX_AUDIO_SUB_TRACKS + 2; j++)
+				{
+					if (item->csa_used)
+					{
+						if (item->is_even)
+						{
+							dvbcsa_bs_key_set(item->cw[j], key_data[cdata->connid].key[j][EVEN]);
+						}
+						else
+						{
+							dvbcsa_bs_key_set(item->cw[j], key_data[cdata->connid].key[j][ODD]);
+						}
+
+						cdata->csa_used = 1;
+					}
+					else
+					{
+						if (item->is_even)
+						{
+							des_set_key(item->cw[j], cdata->pvu_des_ks[j][0]);
+						}
+						else
+						{
+							des_set_key(item->cw[j], cdata->pvu_des_ks[j][1]);
+						}
+
+						cdata->csa_used = 0;
+					}
+				}
+				SAFE_MUTEX_UNLOCK(&emu_fixed_key_data_mutex[i]);
+
+				ll_iter_remove_data(&it);
+			}
+		}
+
+		cs_sleepms(25);
+	}
+
+	return NULL;
+}
+#endif
+
 void stop_stream_server(void)
 {
 	int32_t i;
